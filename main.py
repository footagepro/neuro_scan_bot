from flask import Flask
import os

app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is running!"

import os
import logging
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID"))
REQUIRED_CHANNEL = os.getenv("REQUIRED_CHANNEL")

app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

async def check_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribed = await check_subscription(context, user_id)

    if subscribed:
        await update.message.reply_text(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É."
        )
    else:
        keyboard = [[
            InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{REQUIRED_CHANNEL.strip('@')}"),
            InlineKeyboardButton("–í–°–¢–£–ü–ê–ô –í –°–û–û–ë–©–ï–°–¢–í–û –í–ö", url="https://vk.com/footagepro")
        ]]
        await update.message.reply_text(
            "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –∑–∞–Ω–æ–≤–æ.\n\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribed = await check_subscription(context, user_id)

    if not subscribed:
        await update.message.reply_text(
            "üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
        return

    await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    import threading
    threading.Thread(target=lambda: app_web.run(host="0.0.0.0", port=8080)).start()

    app.run_polling()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
