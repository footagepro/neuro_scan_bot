import os
import logging
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "0"))
REQUIRED_CHANNEL = os.getenv("REQUIRED_CHANNEL", "@your_channel")

logging.basicConfig(level=logging.INFO)

# ‚úÖ Telegram Bot App
application = ApplicationBuilder().token(BOT_TOKEN).build()

# ‚úÖ OpenAI Client
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# ‚úÖ HealthCheck Flask
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"

@flask_app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)
    application.update_queue.put_nowait(update)
    return "OK", 200

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ‚úÖ /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if await check_subscription(context, user_id):
        await update.message.reply_text("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.")
    else:
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{REQUIRED_CHANNEL.strip('@')}")],
            [InlineKeyboardButton("–ù–∞—à VK", url="https://vk.com/footagepro")]
        ]
        await update.message.reply_text(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await check_subscription(context, user_id):
        await update.message.reply_text("‚ùó –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        return

    prompt = update.message.text
    response = openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    await update.message.reply_text(response.choices[0].message.content)

# ‚úÖ Handlers
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ‚úÖ MAIN –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    railway_url = os.getenv("RAILWAY_STATIC_URL")
    if railway_url:
        webhook_url = f"https://{railway_url}/webhook"
        application.bot.set_webhook(url=webhook_url)
        print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    else:
        print("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è RAILWAY_STATIC_URL –Ω–µ –∑–∞–¥–∞–Ω–∞")

    # ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º Flask (healthcheck) –∏ Telegram webhook listener
    import threading

    threading.Thread(target=lambda: flask_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))).start()

    # ‚úÖ Worker Telegram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ update_queue
    application.run_webhook(skip_updates=True, listen="0.0.0.0", port=5000, webhook_path="/webhook")

